import logging
import requests
import tempfile
import os
import tempfile
import pytube
import yt_dlp
import time
import ffmpeg 
import sqlite3 
import datetime

from dotenv import load_dotenv

import googleapiclient.discovery

from pydub import AudioSegment
from pytube.exceptions import RegexMatchError
from io import BytesIO
from aiogram.dispatcher import FSMContext
from aiogram.types import Update
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.reply_keyboard import ReplyKeyboardRemove
from aiogram.types import InputFile
from aiogram.types import ChatActions
from pydub import AudioSegment
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import ParseMode, InputFile, ChatType, CallbackQuery
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton
import markups as nav

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")

storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)

dp = Dispatcher(bot, storage=storage)

youtube = googleapiclient.discovery.build("youtube", "v3", developerKey=API_KEY)

# ---Clear Directory func ---

def clear_music_folder(folder_path):
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))




# --- DataBase ---

conn = sqlite3.connect('users.db')
cursor = conn.cursor()


cursor.execute('''CREATE TABLE IF NOT EXISTS users
              (id INTEGER PRIMARY KEY,
               username TEXT,
               first_name TEXT,
               last_name TEXT,
               date_added TEXT)''')

def add_user(user):
    date_added = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO users (id, username, first_name, last_name, date_added) VALUES (?, ?, ?, ?, ?)", 
                   (user.id, user.username, user.first_name, user.last_name, date_added))
    conn.commit()

def get_user_count():
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    return count

#class db:
# --- Search Function ---


async def search_music(query: str) -> list:
    request = youtube.search().list(
        part="id,snippet",
        q=query,
        type="video",
        videoDefinition="high",
        maxResults=10,
    )
    response = request.execute()
    videos = []
    for item in response["items"]:
        video_id = item["id"]["videoId"]
        video_title = item["snippet"]["title"]
        video_url = f"https://www.youtube.com/watch?v={video_id}"
        videos.append({"title": video_title, "url": video_url})
    return videos

# –û–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏
class SearchMusic(StatesGroup):
    waiting_for_music_query = State()

@dp.message_handler(Text(equals='üéµ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏ üéµ'))
async def search(message: types.Message):
    message_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:"
    await message.answer(message_text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏
    await SearchMusic.waiting_for_music_query.set()

@dp.message_handler(state=SearchMusic.waiting_for_music_query)
async def search_music_query(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = message.text

    # –ò—â–µ–º –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    results = await search_music(query)

    if results:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–µ—Å–Ω—è–º–∏
        buttons = []
        for result in results:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø–µ—Å–Ω–∏
            button = InlineKeyboardButton(text=result['title'], callback_data=result['url'])
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
            buttons.append([button])  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
        await bot.send_message(chat_id=message.from_user.id, text="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:", reply_markup=markup)

    else:
        # –ï—Å–ª–∏ –ø–µ—Å–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=message.from_user.id, text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

#–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

async def download_audio_from_youtube(url):
    ydl_opts = {
        'format': 'bestaudio[ext=m4a]',
        'outtmpl': 'music\%(title)s.%(ext)s',
        'noplaylist': True,
        'quiet': True,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])
        info_dict = ydl.extract_info(url, download=False)
        audio_path = ydl.prepare_filename(info_dict)

        return audio_path
    

@dp.callback_query_handler(lambda callback_query: True)
async def process_callback_query(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ callback_data
    video_url = callback_query.data

    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ YouTube
    audio_file_path = await download_audio_from_youtube(video_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    with open(audio_file_path, 'rb') as audio_file:
        audio_bytes = audio_file.read()
        audio_bytesio = BytesIO(audio_bytes)
        audio_input_file = types.InputFile(audio_bytesio, filename=os.path.basename(audio_file_path))

    await bot.send_audio(callback_query.from_user.id, audio=audio_input_file)
    
    time.sleep(5)
    
    clear_music_folder('music')
           


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---

@dp.message_handler(commands= ['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id FROM users WHERE id = ?", (user.id,))
    existing_user = cursor.fetchone()
    if existing_user is None:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_user(user)
    
    await bot.send_sticker(message.chat.id, sticker=r'CAACAgIAAxkBAAEH601j_GVbqimaDYzFWi6awjzH4Xnw0wACrQIAAjZ2IA6ZtuZmWWWEYC4E' )
    await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}, —è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π  –±–æ—Ç. \n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!".format(message.from_user), reply_markup = nav.mainMenu)

@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.from_user.id == 749034008:
        text = message.text[9:]
        #users = conn.get_u



@dp.message_handler()
async def bot_message(message: types.Message):
    
    if message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)
        
# --- search Music Menu ---


    elif message.text == 'üé∂ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ üé∂':
        await bot.send_message(message.from_user.id, 'üé∂ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ üé∂', reply_markup=nav.otherMenu)    
    
        



    elif message.text == 'ü§ñ –ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ü§ñ':
        await bot.send_message(message.from_user.id, 'ü§ñ –ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ü§ñ', reply_markup=nav.btnBack)
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, —è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç \n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üé∂ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ üé∂ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—É–∂–Ω—ã \n–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–µ—Å–Ω–∏ –ª—é–±–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üé§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é üé§, –≤ –º–µ–Ω—é üé∂ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ üé∂\n–ò –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—É—é –º—É–∑—ã–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ‚ù§Ô∏è‚Äçüî• –ü–æ–ø—É–ª—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ ‚ù§Ô∏è‚Äçüî• –≤ –º–µ–Ω—é üé∂ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ üé∂')

    elif message.text == '‚ù§Ô∏è‚Äçüî• –ü–æ–ø—É–ª—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ ‚ù§Ô∏è‚Äçüî•':
        await bot.send_message(message.from_user.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


def main():
    executor.start_polling(dp, skip_updates=True)

if __name__ == '__main__':
    main()
